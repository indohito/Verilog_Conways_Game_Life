module light (clk, reset, KEY, LEDR, LEDR_out);
	input logic 	clk, reset;
	// LEDR[0] = LEFT, LEDR[1] = RIGHT
	// KEY[0] corresponds to KEY0, KEY[1] corresponds to KEY3.
	input logic [1:0]		KEY;
	input logic [7:0]		LEDR;
	output logic			LEDR_out;
	enum { no_led, led_right, led_left, led_on} ps, ns;
	always_comb begin
			case (ps)
				no_led:		if 	  ((LEDR[0] & KEY[0]) | (LEDR[1] & KEY[1]) | (LEDR[0] & KEY[0]) | (LEDR[1] & KEY[1]))	ns = 	led_on;
								else																														ns = 	no_led;
				
				
				led_on:		if 	  ((KEY[0]) | KEY[1] | KEY[2] | KEY[3])		ns = 	no_led;
								else 																ns = 	led_on;
				default: ns = no_led;				
			endcase
		end
	assign LEDR_out =  (ps == led_on);
	// DFFs
	always_ff @(posedge clk) begin
		if (reset)
			ps <= no_led;
		else
			ps <= ns;
	end
endmodule