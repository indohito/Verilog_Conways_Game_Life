module light_red (clk, reset, SW_pause, KEY, LEDR, LEDR_out);
	input logic 	clk, reset, SW_pause;
	// LEDR[0] = LEFT, LEDR[1] = RIGHT
	// KEY[0] corresponds to KEY0, KEY[1] corresponds to KEY3.
	input logic [3:0]		KEY;
	input logic [7:0]		LEDR;
	output logic			LEDR_out;
	enum { no_led, led_on} ps, ns;
	always_comb begin
			case (ps)
				no_led:		if 	  ((LEDR[7] & KEY[0]) | (LEDR[3] & KEY[1]) | (LEDR[1] & KEY[2]) | (LEDR[5] & KEY[3]))	ns = 	led_on;
								else																														ns = 	no_led;
				
				
				led_on:		if 	  ((KEY[0]) | KEY[1] | KEY[2] | KEY[3])		ns = 		no_led;
								else 																ns = 		led_on;
				default: ns = no_led;				
			endcase
		end
	assign LEDR_out =  (ps == led_on);
	// DFFs
	always_ff @(posedge clk) begin
		if (reset)
			ps <= no_led;
		else
			ps <= ns;
	end
endmodule

module light_red_testbench();  
 logic 	clk, reset, SW_pause;
 logic [3:0]				key;
 logic [7:0]		ledr;
 logic			ledr_out; 
  
 light_red dut (clk, reset, SW_pause, key, ledr, ledr_out);   
   
 // Set up a simulated clock.   
 parameter CLOCK_PERIOD=100;  
 initial begin  
  clk <= 0;  
  forever #(CLOCK_PERIOD/2) clk <= ~clk; // Forever toggle the clock 
 end  
   
 // Set up the inputs to the design.  Each line is a clock cycle.  
 initial begin  
                      @(posedge clk);   
  reset <= 1;         @(posedge clk); // Always reset FSMs at start  
  reset <= 0;@(posedge clk);   
                      @(posedge clk);   
                      @(posedge clk);   
                      @(posedge clk);   
              ledr[0] <= 1; key[0] <= 1; @(posedge clk);   
							 @(posedge clk);   
              ledr[0] <= 0; @(posedge clk);   
                      @(posedge clk);   
              ledr[1] <= 1; key[1] <= 1;       @(posedge clk);   
                      @(posedge clk);   
              ledr[1] <= 0; key[1] <= 0; @(posedge clk);   
                      @(posedge clk);
				  reset <= 1;		 @(posedge clk); 
							 @(posedge clk); 
  $stop; // End the simulation.  
 end  
 endmodule
 